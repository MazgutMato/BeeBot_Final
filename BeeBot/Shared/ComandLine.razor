@inject ControllerCommands controllerCommands

@*end of game*@
@if (this.StateOfGame == true)
{
	<Message Success="true" Text="Úspešne si prešiel mapou!" />
	StateOfGame = null;
}
else if (this.StateOfGame == false)
{
	<Message Success="false" Text="Skús to znovu!" />
	StateOfGame = null;
}

@*command panel*@
<div class="card m-3 border border-3 border-dark">
	<div class="card-body border-bottom border-3 border-dark">
		<div class="row d-flex justify-content-center p-1">
			Zadaj príkazy
		</div>
	</div>
	<div class="card-body border-bottom border-3 border-dark">
		<div class="row d-flex p-3 justify-content-center">
			<img src="images/commands/playl.svg" class="command command_pick" @onclick="async () => {
							if (controllerCommands.CancellationToken == null)
								await this.runProgram();
							}" />
			<img src="images/commands/stop.svg" class="command command_pick" @onclick="() => {
							controllerCommands.StopAnimation();
							this.StateOfGame = null;
							}" />
			<img src="images/commands/trash.svg" class="command command_pick" @onclick="() => {
							controllerCommands.DeleteCommands();
							this.StateOfGame = null;
							}" />
		</div>
		<div class="row d-flex p-3 justify-content-center">
			<img src="images/commands/rotate_left.svg" class="command command_pick" @onclick="() => controllerCommands.AddCommand(new Command(CommandType.ROTATELEFT))" />
			<img src="images/commands/up.svg" class="command command_pick" @onclick="() => controllerCommands.AddCommand(new Command(CommandType.MOVEFORWARD))" />
			<img src="images/commands/down.svg" class="command command_pick" @onclick="() => controllerCommands.AddCommand(new Command(CommandType.MOVEBACK))" />
			<img src="images/commands/rotate_right.svg" class="command command_pick" @onclick="() => controllerCommands.AddCommand(new Command(CommandType.ROTATERIGHT))" />
		</div>
	</div>
	<div class="card-body">
		<div class="row d-flex justify-content-center p-1">
			Zadané príkazy
		</div>
		@if (controllerCommands.Commands.Any())
		{
			<div class="row d-flex justify-content-center card-body">
				@for (var i = 0; i < controllerCommands.Commands.Count; i++)
				{
					int cisloPrikazu = i;
					Command actualCommand = controllerCommands.Commands[i];
					switch (actualCommand.Type)
					{
						case CommandType.MOVEFORWARD:
						<img src="images/commands/up.svg" class="command command_remove" 
							style="@(actualCommand.Active == true ? "filter: invert(11%) sepia(61%) saturate(5810%) hue-rotate(6deg) brightness(95%) contrast(106%);" : "")" 
							@onclick="() => {
							controllerCommands.CancellationToken?.Cancel();
							controllerCommands.Commands.RemoveAt(cisloPrikazu);
							}" />
							break;
						case CommandType.MOVEBACK:
							<img src="images/commands/down.svg" class="command command_remove"
							style="@(actualCommand.Active == true ? "filter: invert(11%) sepia(61%) saturate(5810%) hue-rotate(6deg) brightness(95%) contrast(106%);" : "")"
							@onclick="() => {
							controllerCommands.CancellationToken?.Cancel();
							controllerCommands.Commands.RemoveAt(cisloPrikazu);
							}"/>
							break;
						case CommandType.ROTATELEFT:
							<img src="images/commands/rotate_left.svg" class="command command_remove"
							style="@(actualCommand.Active == true ? "filter: invert(11%) sepia(61%) saturate(5810%) hue-rotate(6deg) brightness(95%) contrast(106%);" : "")"
							@onclick="() => {
							controllerCommands.CancellationToken?.Cancel();
							controllerCommands.Commands.RemoveAt(cisloPrikazu);
							}"/>
							break;
						case CommandType.ROTATERIGHT:
							<img src="images/commands/rotate_right.svg" class="command command_remove"
							style="@(actualCommand.Active == true ? "filter: invert(11%) sepia(61%) saturate(5810%) hue-rotate(6deg) brightness(95%) contrast(106%);" : "")"
							@onclick="() => {
							controllerCommands.CancellationToken?.Cancel();
							controllerCommands.Commands.RemoveAt(cisloPrikazu);
							}"/>
							break;
					}	
				}													
			</div>
		}
	</div>
</div>

@code {
	#region Overrides of ComponentBase

	protected override void OnInitialized()
	{
		base.OnInitialized();

		this.controllerCommands.OnChanged += this.StateHasChanged;
	}

	#endregion

	public bool? StateOfGame { get; set; }

	async Task runProgram()
	{
		this.StateOfGame = null;
		this.StateOfGame =  await controllerCommands.StartAnimationAsync();
	}

}